@use "sass:color";
@import "open-props/style";

$colors-dark: (
  "text": #eef9ed,
  "text-alt": #a7b8a5,
  "background": #262226,
  "background-alt": #1b161b,
  "primary": #0d310c,
  "secondary": #73d172,
  "accent": #cf73d3,
  "shadow": #151315,
);

$colors-light: (
  "text": #2a0923,
  "text-alt": #6c5668,
  "background": #fdf7fc,
  "background-alt": #fefbfe,
  "primary": #e29dd4,
  "secondary": #910d77,
  "accent": #277c9f,
  "shadow": #808080,
);

@function color-rgb($color) {
  @return #{color.red($color) color.green($color) color.red($color)};
}

@mixin define-color($name, $value, $suffix) {
  $mid: if($suffix, -#{$suffix}, "");
  --#{$name}#{$mid}: #{$value};
  --#{$name}#{$mid}-rgb: #{color-rgb($value)};
}

:root {
  /* Fonts */
  --font-heading: Schibsted Grotesk, ui-serif, serif;
  --font-body: Noto Sans, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu,
    Cantarell, sans-serif;
  --font-display: "Lobster", display, cursive, serif;

  @each $name, $val in $colors-dark {
    @include define-color($name, $val, "dark");
  }
  @each $name, $val in $colors-light {
    @include define-color($name, $val, "light");
  }

  --size-content: 65ch;
}

@mixin use-theme($colors, $theme) {
  @each $name, $_ in $colors {
    --#{$name}: var(--#{$name}-#{$theme});
    --#{$name}-rgb: var(--#{$name}-#{$theme}-rgb);
  }
}

@media (prefers-color-scheme: dark) or (prefers-color-scheme: no-preference) {
  :root {
    @include use-theme($colors-dark, "dark");
  }
}

@media (prefers-color-scheme: light) {
  :root {
    @include use-theme($colors-light, "light");
  }
}

[data-theme="dark"] {
  @include use-theme($colors-dark, "dark");
}

[data-theme="light"] {
  @include use-theme($colors-light, "light");
}

*,
*::after,
*::before {
  box-sizing: border-box;
}

html,
body {
  height: auto;
  min-height: 100vh;
  min-height: 100lvh;
}

img {
  max-width: 100%;
  height: auto;
  vertical-align: middle;
  background-repeat: no-repeat;
  background-size: cover;
  shape-margin: 0.75rem;
  font-style: italic;
}

body {
  font-family: var(--font-body);
  background: var(--background);
  color: var(--text);

  margin: 0;
  font-size: var(--font-size-fluid-1);

  display: grid;
  grid-template-rows: auto 1fr;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: var(--font-heading);
  font-weight: 500;
  margin: unset;
}

.prose :is(h1, h2, h3, h4, h5, h6) {
  margin-block-start: 1.2em;
}

.prose p {
  line-height: 2em;
  margin-block-end: 1.8em;
}

h1 {
  font-size: var(--font-size-fluid-3);
  font-weight: 700;
  line-height: 1.5;
}

h2 {
  font-size: var(--font-size-fluid-2);
  font-weight: 600;
  line-height: 1.25;
}

h3 {
  line-height: 1.1;
}

a {
  text-decoration: none;
  color: var(--accent);
}

a:hover {
  filter: saturate(50%) brightness(110%);
}

p {
  line-height: 1.4;
}

figcaption {
  text-align: center;
  font-size: var(--font-size-2);
  color: var(--text-alt);
  padding-inline: var(--size-2);
}

.content {
  width: min(100%, var(--size-content));
  margin: var(--size-8) auto;
  padding-inline: var(--size-fluid-3);
}

button {
  all: unset;
  color: inherit;
  cursor: pointer;
}

.btn {
  font-size: var(--font-size-1);
  padding: var(--size-3) var(--size-5);
  border-radius: var(--size-fluid-1);
  vertical-align: center;
}

.btn:hover,
.btn:focus,
.btn:focus-within {
  filter: saturate(50%) brightness(110%);
}

.btn-icon {
  display: flex;
  flex-flow: row nowrap;
  gap: var(--size-2);
}

.btn-primary {
  color: var(--text);
  background: var(--primary);
}

.btn-secondary {
  color: var(--background);
  background: var(--secondary);
}

.btn-accent {
  color: var(--background);
  background: var(--accent);
}
