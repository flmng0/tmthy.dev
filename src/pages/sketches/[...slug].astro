---
import { getCollection } from "astro:content";
import "katex/dist/katex.min.css";
import { readFile } from "fs/promises";

import CloseIcon from "~icons/mdi/close";

import { Code } from "astro:components";
import BaseLayout from "../../layouts/BaseLayout.astro";
import SketchCanvas from "../../components/SketchCanvas.svelte";
import Modal from "../../components/Modal.svelte";

export async function getStaticPaths() {
  const sketchEntries = await getCollection("sketches");

  return sketchEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const data = entry.data;

const sketchPath = new URL(`../../sketches/${entry.slug}.ts`, import.meta.url)
  .pathname;
const sketchCode = await readFile(sketchPath, "utf-8");

const { Content } = await entry.render();
---

<BaseLayout title={data.name + " | Sketches"} description={data.brief}>
  <article class="content">
    <Modal id="showSketch" client:load>
      <Code code={sketchCode} lang="ts" />
      <CloseIcon slot="close-button" />
    </Modal>

    <header>
      <SketchCanvas
        client:load
        slug={entry.slug}
        background={data.background || null}
      />

      <button onclick="window.showSketch.showModal()">Show Source Code</button>
    </header>

    <main>
      <hgroup>
        <h1>{data.name}</h1>
        <p>{data.brief}</p>
      </hgroup>

      <Content />
    </main>
  </article>
</BaseLayout>

<style>
  article {
    display: grid;
    grid-template-columns: 1fr 1fr;
    margin-inline: auto;
    width: fit-content;
    gap: var(--size-fluid-2);
  }

  :global(#showSketch pre) {
    margin: 0;
    padding: var(--size-fluid-2);
    border-radius: var(--radius-3);
  }

  header {
    align-self: start;
    position: sticky;
    top: var(--size-12);
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: stretch;
  }

  header > button {
    background-color: var(--background-alt);
    width: 100%;
    padding-block: var(--size-fluid-2);
    text-align: center;
  }

  hgroup {
    margin-block-end: var(--size-fluid-6);
  }

  main {
    width: min(100%, var(--size-content));
  }

  main :global(pre) {
    padding: var(--size-fluid-2);
    border-radius: var(--radius-2);
  }

  @media (max-width: 1024px) {
    article {
      grid-template-columns: 1fr;
    }

    header {
      position: revert;
    }
  }
</style>
