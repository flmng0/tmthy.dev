---
import { getCollection } from "astro:content";

import CloseIcon from "~icons/mdi/close";

import { Code } from "astro:components";
import BaseLayout from "../../layouts/BaseLayout.astro";
import SketchCanvas from "../../components/SketchCanvas.svelte";
import Modal from "../../components/Modal.svelte";

export async function getStaticPaths() {
  const sketchEntries = await getCollection("sketches");

  return sketchEntries.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry } = Astro.props;
const data = entry.data;

const sketchCode = await import(`../../sketches/elm/${data.appName}.elm?raw`).then(
  (s) => s.default,
);

const { Content } = await entry.render();
---

<BaseLayout title={data.name + " | Sketches"} description={data.brief}>
  <Modal id="showSketch" client:load>
    <Code code={sketchCode} lang="elm" />
    <CloseIcon slot="close-button" />
  </Modal>

  <article>
    <header>
      <SketchCanvas
        client:load
        appName={data.appName}
        background={data.background || null}
      />

      <button onclick="window.showSketch.showModal()">Show Source Code</button>
    </header>

    <main class="content">
      <hgroup>
        <h1>{data.name}</h1>
        <p>{data.brief}</p>
      </hgroup>

      <Content />
    </main>
  </article>
</BaseLayout>

<style>
  article {
    display: grid;
    grid-template-columns: 1fr 1fr;
    align-items: center;
    margin-inline: auto;
    gap: var(--size-fluid-2);

    max-width: 120ch;
  }

  :global(#showSketch pre) {
    margin: 0;
    padding: var(--size-fluid-2);
    border-radius: var(--radius-3);
    width: min(80ch, 100%);
  }

  header {
    align-self: start;
    position: sticky;
    --top: var(--size-8);
    top: calc(var(--top) + var(--size-4));
    width: 100%;
    padding-block: var(--top);
  }

  header > button {
    background-color: var(--background-alt);
    padding-block: var(--size-fluid-2);
    text-align: center;
    width: 100%;
  }

  hgroup {
    margin-block-end: var(--size-fluid-6);
  }

  main :global(pre) {
    padding: var(--size-fluid-2);
    border-radius: var(--radius-2);
  }

  @media (max-width: 1024px) {
    article {
      grid-template-columns: 1fr;
    }

    header {
      position: revert;
      padding-inline: var(--size-fluid-3);
    }
  }
</style>
